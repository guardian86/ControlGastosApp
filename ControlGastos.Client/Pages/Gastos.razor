@page "/gastos"
@inject HttpClient Http
@inject IJSRuntime JS
@using ControlGastos.Core.DTOs
@using System.Text.Json
@using System.Text
@attribute [Authorize]

<h3 class="mb-4"><i class="fa fa-receipt me-2"></i>Registros de Gastos</h3>

<button class="btn btn-success mb-3" @onclick="NuevoGasto">
    <i class="fa fa-plus me-1"></i> Nuevo Gasto
</button>

<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Fecha</th>
            <th>Fondo Monetario</th>
            <th>Comercio</th>
            <th>Tipo Documento</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (gastos.Count == 0)
        {
            <tr><td colspan="6" class="text-center">No hay gastos para mostrar.</td></tr>
        }
        else
        {
            @foreach (var g in gastos)
            {
                <tr>
                    <td>@g.Id</td>
                    <td>@g.Fecha.ToShortDateString()</td>
                    <td>@g.FondoMonetarioNombre</td>
                    <td>@g.NombreComercio</td>
                    <td>@g.TipoDocumento</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditGasto(g)"><i class="fa fa-edit"></i></button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteGasto(g)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<!-- Modal principal para Gasto -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editando ? "Editar Gasto" : "Nuevo Gasto")</h5>
                <button type="button" class="btn-close" @onclick="() => modalVisible = false"></button>
            </div>
            <form @onsubmit="GuardarGastoAsync">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Fecha</label>
                        <input type="date" class="form-control" value="@gastoEdit.Fecha.ToString("yyyy-MM-dd")" @oninput="e => gastoEdit.Fecha = DateTime.TryParse(e.Value?.ToString(), out var d) ? d : gastoEdit.Fecha" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fondo Monetario</label>
                        <input class="form-control" value="@gastoEdit.FondoMonetarioNombre" @oninput="e => gastoEdit.FondoMonetarioNombre = e.Value?.ToString()" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Observaciones</label>
                        <input class="form-control" value="@gastoEdit.Observaciones" @oninput="e => gastoEdit.Observaciones = e.Value?.ToString()" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Nombre de Comercio</label>
                        <input class="form-control" value="@gastoEdit.NombreComercio" @oninput="e => gastoEdit.NombreComercio = e.Value?.ToString()" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tipo de Documento</label>
                        <input class="form-control" value="@gastoEdit.TipoDocumento" @oninput="e => gastoEdit.TipoDocumento = e.Value?.ToString()" />
                    </div>
                    <h5 class="mt-4 mb-2">Detalle de Gastos</h5>
                    <table class="table table-sm table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Tipo de Gasto</th>
                                <th>Monto</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (gastoEdit.Detalles.Count == 0)
                            {
                                <tr><td colspan="2" class="text-center">Sin detalles</td></tr>
                            }
                            else
                            {
                                @foreach (var d in gastoEdit.Detalles)
                                {
                                    <tr>
                                        <td>@d.TipoGastoNombre</td>
                                        <td>@d.Monto.ToString("C")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-info btn-sm" @onclick="AgregarDetalle"><i class="fa fa-plus me-1"></i>Agregar Detalle</button>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-save me-1"></i>Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalVisible = false">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal para Detalle de Gasto -->
<div class="modal fade @(modalDetalleVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar Detalle</h5>
                <button type="button" class="btn-close" @onclick="() => modalDetalleVisible = false"></button>
            </div>
            <form @onsubmit="ConfirmarDetalle">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Tipo de Gasto</label>
                        <select class="form-select" @onchange="e => detalleEdit.TipoGastoId = int.TryParse(e.Value?.ToString(), out var id) ? id : 0">
                            <option value="0">-- Seleccione un tipo --</option>
                            @foreach (var tipoGasto in tiposDeGastoDisponibles)
                            {
                                <option value="@tipoGasto.Id" selected="@(detalleEdit.TipoGastoId == tipoGasto.Id)">@tipoGasto.Nombre (@tipoGasto.Codigo)</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Monto</label>
                        <input type="number" class="form-control" step="0.01" value="@detalleEdit.Monto" @oninput="e => detalleEdit.Monto = decimal.TryParse(e.Value?.ToString(), out var m) ? m : detalleEdit.Monto" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Agregar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalDetalleVisible = false">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    List<TipoGastoDto> tiposDeGastoDisponibles = new();
    List<GastoEncabezadoDto> gastos = new();
    GastoEncabezadoDto gastoEdit = new() { Detalles = new List<GastoDetalleDto>() };
    bool modalVisible = false;
    bool editando = false;
    bool modalDetalleVisible = false;
    GastoDetalleDto detalleEdit = new();
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarGastosAsync();
        await CargarTiposDeGastoDisponiblesAsync();
    }

    async Task CargarGastosAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/GastoEncabezado");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                gastos = JsonSerializer.Deserialize<List<GastoEncabezadoDto>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<GastoEncabezadoDto>();
            }
            else
            {
                errorMessage = $"Error al cargar gastos: {response.StatusCode} - {await response.Content.ReadAsStringAsync() }";
                gastos = new List<GastoEncabezadoDto>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Excepci√≥n al cargar gastos: {ex.Message}";
            gastos = new List<GastoEncabezadoDto>();
        }
    }

    void NuevoGasto()
    {
        gastoEdit = new GastoEncabezadoDto { Detalles = new List<GastoDetalleDto>() };
        editando = false;
        modalVisible = true;
    }

    async Task CargarTiposDeGastoDisponiblesAsync()
    {
        var response = await Http.GetAsync("api/TipoGasto");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            tiposDeGastoDisponibles = JsonSerializer.Deserialize<List<TipoGastoDto>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<TipoGastoDto>();
        }
    }

    void AgregarDetalle()
    {
        detalleEdit = new GastoDetalleDto();
        modalDetalleVisible = true;
    }

    async Task ConfirmarDetalle()
    {
        if (detalleEdit.TipoGastoId == 0 || detalleEdit.Monto <= 0)
            return;
        var tipoGastoSeleccionado = tiposDeGastoDisponibles.FirstOrDefault(tg => tg.Id == detalleEdit.TipoGastoId);
        gastoEdit.Detalles.Add(new GastoDetalleDto
        {
            TipoGastoId = detalleEdit.TipoGastoId,
            TipoGastoNombre = tipoGastoSeleccionado?.Nombre ?? string.Empty,
            Monto = detalleEdit.Monto
        });
        modalDetalleVisible = false;
    }

    async Task GuardarGastoAsync()
    {
        errorMessage = null;
        if (gastoEdit.Fecha == default || string.IsNullOrWhiteSpace(gastoEdit.FondoMonetarioNombre) || string.IsNullOrWhiteSpace(gastoEdit.NombreComercio) || string.IsNullOrWhiteSpace(gastoEdit.TipoDocumento) || gastoEdit.Detalles.Count == 0)
        {
            errorMessage = "Todos los campos y al menos un detalle son obligatorios.";
            return;
        }
        foreach (var detalle in gastoEdit.Detalles)
        {
            var tipoGasto = tiposDeGastoDisponibles.FirstOrDefault(t => t.Id == detalle.TipoGastoId);
            detalle.TipoGastoNombre = tipoGasto?.Nombre ?? string.Empty;
        }
        try
        {
            HttpResponseMessage response;
            var json = JsonSerializer.Serialize(gastoEdit);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            if (editando)
                response = await Http.PutAsync($"api/GastoEncabezado/{gastoEdit.Id}", content);
            else
                response = await Http.PostAsync("api/GastoEncabezado", content);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {error}";
                return;
            }
            modalVisible = false;
            await CargarGastosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    void EditGasto(GastoEncabezadoDto gasto)
    {
        gastoEdit = new GastoEncabezadoDto
        {
            Id = gasto.Id,
            Fecha = gasto.Fecha,
            FondoMonetarioNombre = gasto.FondoMonetarioNombre,
            Observaciones = gasto.Observaciones,
            NombreComercio = gasto.NombreComercio,
            TipoDocumento = gasto.TipoDocumento,
            Detalles = gasto.Detalles.Select(d => new GastoDetalleDto { TipoGastoId = d.TipoGastoId, TipoGastoNombre = d.TipoGastoNombre, Monto = d.Monto }).ToList()
        };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteGasto(GastoEncabezadoDto gasto)
    {
        await Http.DeleteAsync($"api/GastoEncabezado/{gasto.Id}");
        await CargarGastosAsync();
    }
}
