@page "/gastos"
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>Registros de Gastos</PageTitle>

<Heading Size="HeadingSize.Is3">Registros de Gastos</Heading>

<DataGrid TItem="GastoEncabezadoDto" Data="gastos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="GastoEncabezadoDto" Field="@nameof(GastoEncabezadoDto.Id)" Caption="ID" />
        <DataGridColumn TItem="GastoEncabezadoDto" Field="@nameof(GastoEncabezadoDto.Fecha)" Caption="Fecha" />
        <DataGridColumn TItem="GastoEncabezadoDto" Field="@nameof(GastoEncabezadoDto.FondoMonetarioNombre)" Caption="Fondo Monetario" />
        <DataGridColumn TItem="GastoEncabezadoDto" Field="@nameof(GastoEncabezadoDto.NombreComercio)" Caption="Comercio" />
        <DataGridColumn TItem="GastoEncabezadoDto" Field="@nameof(GastoEncabezadoDto.TipoDocumento)" Caption="Tipo Documento" />
        <DataGridCommandColumn TItem="GastoEncabezadoDto" Caption="Acciones" TextAlignment="TextAlignment.Center">
            <DisplayTemplate>
                <ComandosFila TItem="GastoEncabezadoDto"
                              Item="context"
                              OnEdit="EditGasto"
                              OnDelete="DeleteGasto" />
            </DisplayTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class="text-center p-4">No hay gastos para mostrar.</div>
    </EmptyTemplate>
</DataGrid>

<Button Color="Color.Success" Clicked="NuevoGasto">Nuevo Gasto</Button>

<Modal @bind-Visible="modalVisible">
    <ModalHeader>@(editando ? "Editar Gasto" : "Nuevo Gasto")</ModalHeader>
    <ModalBody>
        <Validations @ref="validator" Model="gastoEdit">
            <Validator For="@(() => gastoEdit.Fecha)">
                <Field>
                    <FieldLabel>Fecha</FieldLabel>
                    <DateEdit @bind-Date="gastoEdit.Fecha" Placeholder="Fecha" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => gastoEdit.FondoMonetarioNombre)">
                <Field>
                    <FieldLabel>Fondo Monetario</FieldLabel>
                    <TextEdit @bind-Text="gastoEdit.FondoMonetarioNombre" Placeholder="Fondo Monetario" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => gastoEdit.Observaciones)">
                <Field>
                    <FieldLabel>Observaciones</FieldLabel>
                    <TextEdit @bind-Text="gastoEdit.Observaciones" Placeholder="Observaciones" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => gastoEdit.NombreComercio)">
                <Field>
                    <FieldLabel>Nombre de Comercio</FieldLabel>
                    <TextEdit @bind-Text="gastoEdit.NombreComercio" Placeholder="Nombre de Comercio" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => gastoEdit.TipoDocumento)">
                <Field>
                    <FieldLabel>Tipo de Documento</FieldLabel>
                    <TextEdit @bind-Text="gastoEdit.TipoDocumento" Placeholder="Tipo de Documento" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Heading Size="HeadingSize.Is5">Detalle de Gastos</Heading>
            <DataGrid TItem="GastoDetalleDto" Data="gastoEdit.Detalles" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
                <DataGridColumns>
                    <DataGridColumn TItem="GastoDetalleDto" Field="@nameof(GastoDetalleDto.TipoGastoNombre)" Caption="Tipo de Gasto" />
                    <DataGridColumn TItem="GastoDetalleDto" Field="@nameof(GastoDetalleDto.Monto)" Caption="Monto" />
                    <DataGridCommandColumn TItem="GastoDetalleDto" />
                </DataGridColumns>
            </DataGrid>
            <Button Color="Color.Info" Clicked="AgregarDetalle">Agregar Detalle</Button>
            
        </Validations>
        <Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="GuardarGastoAsync">Guardar</Button>
        <Button Color="Color.Secondary" Clicked="()=>modalVisible=false">Cancelar</Button>
    </ModalFooter>
</Modal>

<Modal @bind-Visible="modalDetalleVisible">
    <ModalHeader>Agregar Detalle</ModalHeader>
    <ModalBody>
        <Validations @ref="detalleValidator" Model="detalleEdit">
            <Validator For="@(() => detalleEdit.TipoGastoId)">
                <Field>
                    <FieldLabel>Tipo de Gasto</FieldLabel>
                    <Select TValue="int" @bind-Value="detalleEdit.TipoGastoId">
                        <SelectItem TValue="int" Value="0">-- Seleccione un tipo --</SelectItem>
                        @if (tiposDeGastoDisponibles != null)
                        {
                            @foreach (var tipoGasto in tiposDeGastoDisponibles)
                            {
                                <SelectItem TValue="int" Value="@tipoGasto.Id">@tipoGasto.Nombre (@tipoGasto.Codigo)</SelectItem>
                            }
                        }
                    </Select>
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => detalleEdit.Monto)">
                <Field>
                    <FieldLabel>Monto</FieldLabel>
                    <NumericEdit TValue="decimal" @bind-Value="detalleEdit.Monto" Placeholder="Monto" />
                    <ValidationMessage />
                </Field>
            </Validator>
        </Validations>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="ConfirmarDetalle">Agregar</Button>
        <Button Color="Color.Secondary" Clicked="()=>modalDetalleVisible=false">Cancelar</Button>
    </ModalFooter>
</Modal>

@code {

    List<TipoGastoDto> tiposDeGastoDisponibles = new(); 

    List<GastoEncabezadoDto> gastos = new();
    GastoEncabezadoDto gastoEdit = new() 
    { 
        Detalles = new List<GastoDetalleDto>() 
    };

    bool modalVisible = false;
    bool editando = false;
    Validations? validator;
    bool modalDetalleVisible = false;
    Validations? detalleValidator;
    GastoDetalleDto detalleEdit = new();
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarGastosAsync();
        await CargarTiposDeGastoDisponiblesAsync();
    }

    async Task CargarGastosAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/GastoEncabezado"); 
            if (response.IsSuccessStatusCode)
            {
                gastos = await response.Content.ReadFromJsonAsync<List<GastoEncabezadoDto>>() ?? new List<GastoEncabezadoDto>();
            }
            else
            {
                errorMessage = $"Error al cargar gastos: {response.StatusCode} - {await response.Content.ReadAsStringAsync() }";
                Console.WriteLine(errorMessage); 
                gastos = new List<GastoEncabezadoDto>(); 
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Excepci√≥n al cargar gastos: {ex.Message}";
            Console.WriteLine(errorMessage); 
            gastos = new List<GastoEncabezadoDto>();
        }
        StateHasChanged(); // Puede ser necesario 
    }

    void NuevoGasto()
    {
        gastoEdit = new GastoEncabezadoDto { Detalles = new List<GastoDetalleDto>() };
        editando = false;
        modalVisible = true;
    }


    async Task CargarTiposDeGastoDisponiblesAsync()
    {
        tiposDeGastoDisponibles = await Http.GetFromJsonAsync<List<TipoGastoDto>>("api/TipoGasto") ?? new();
    }

    void AgregarDetalle()
    {
        detalleEdit = new GastoDetalleDto(); 
        modalDetalleVisible = true;
    }

    async Task ConfirmarDetalle()
    {
        if (detalleValidator is null || !await detalleValidator.ValidateAll()) return;

        var tipoGastoSeleccionado = tiposDeGastoDisponibles.FirstOrDefault(tg => tg.Id == detalleEdit.TipoGastoId);

        gastoEdit.Detalles.Add(new GastoDetalleDto
        {
            TipoGastoId = detalleEdit.TipoGastoId,
            TipoGastoNombre = tipoGastoSeleccionado?.Nombre, 
            Monto = detalleEdit.Monto
        });
        modalDetalleVisible = false;
    }

    async Task GuardarGastoAsync()
    {
        errorMessage = null;
        if (validator is null || !await validator.ValidateAll()) return;
        try
        {
            HttpResponseMessage response;
            if (editando)
                response = await Http.PutAsJsonAsync($"api/GastoEncabezado/{gastoEdit.Id}", gastoEdit);
            else
                response = await Http.PostAsJsonAsync("api/GastoEncabezado", gastoEdit);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {error}";
                return;
            }
            modalVisible = false;
            await CargarGastosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    void EditGasto(GastoEncabezadoDto gasto)
    {
        gastoEdit = new GastoEncabezadoDto
        {
            Id = gasto.Id,
            Fecha = gasto.Fecha,
            FondoMonetarioNombre = gasto.FondoMonetarioNombre,
            Observaciones = gasto.Observaciones,
            NombreComercio = gasto.NombreComercio,
            TipoDocumento = gasto.TipoDocumento,
            Detalles = gasto.Detalles.Select(d => new GastoDetalleDto { TipoGastoNombre = d.TipoGastoNombre, Monto = d.Monto }).ToList()
        };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteGasto(GastoEncabezadoDto gasto)
    {
        await Http.DeleteAsync($"api/GastoEncabezado/{gasto.Id}");
        await CargarGastosAsync();
    }

   
}
