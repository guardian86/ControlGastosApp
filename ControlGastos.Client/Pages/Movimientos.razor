@page "/movimientos"
@inject HttpClient Http


<PageTitle>Consulta de Movimientos</PageTitle>

<Heading Size="HeadingSize.Is3">Consulta de Movimientos</Heading>

<Validations @ref="validator" Model="filtros">
    <Row>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Validator For="@(() => filtros.FechaInicio)">
                <Field>
                    <FieldLabel>Fecha Inicio</FieldLabel>
                    <DateEdit @bind-Date="filtros.FechaInicio" />
                    <ValidationMessage />
                </Field>
            </Validator>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Validator For="@(() => filtros.FechaFin)">
                <Field>
                    <FieldLabel>Fecha Fin</FieldLabel>
                    <DateEdit @bind-Date="filtros.FechaFin" />
                    <ValidationMessage />
                </Field>
            </Validator>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto" Style="align-self: flex-end; padding-bottom: 1rem;">
            <Button Color="Color.Primary" Clicked="BuscarMovimientos">Buscar</Button>
        </Column>
    </Row>
</Validations>

<Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>

<DataGrid TItem="MovimientoDto" Data="@movimientos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="MovimientoDto" Field="@nameof(MovimientoDto.Tipo)" Caption="Tipo" />
        <DataGridColumn TItem="MovimientoDto" Field="@nameof(MovimientoDto.Fecha)" Caption="Fecha" />
        <DataGridColumn TItem="MovimientoDto" Field="@nameof(MovimientoDto.FondoMonetarioNombre)" Caption="Fondo Monetario" />
        <DataGridColumn TItem="MovimientoDto" Field="@nameof(MovimientoDto.Monto)" Caption="Monto" />
        <DataGridColumn TItem="MovimientoDto" Field="@nameof(MovimientoDto.Descripcion)" Caption="Descripción" />
    </DataGridColumns>
</DataGrid>



@code {
    private DateTime fechaInicio = DateTime.Today.AddMonths(-1);
    private DateTime fechaFin = DateTime.Today;
    private List<MovimientoDto> movimientos = new();
    private Validations? validator;
    private string? errorMessage;
    private FiltroMovimientosDto filtros = new();

    private async Task BuscarMovimientos()
    {
        errorMessage = null;
        if (validator is null)
        {
            errorMessage = "El validador no está inicializado.";
            return;
        }
        if (!await validator.ValidateAll())
            return;
        try
        {
            var url = $"api/Movimientos?fechaInicio={fechaInicio:yyyy-MM-dd}&fechaFin={fechaFin:yyyy-MM-dd}";
            movimientos = await Http.GetFromJsonAsync<List<MovimientoDto>>(url) ?? new List<MovimientoDto>();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error al obtener los movimientos: {ex.Message}";
        }
        catch (System.Text.Json.JsonException ex)
        {
            errorMessage = $"Error de formato de datos: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }
}