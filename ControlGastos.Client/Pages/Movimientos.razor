@page "/movimientos"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<PageTitle>Consulta de Movimientos</PageTitle>

<h3 class="mb-4"><i class="fa fa-search me-2"></i>Consulta de Movimientos</h3>

<EditForm Model="filtros" OnValidSubmit="BuscarMovimientos">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3 align-items-end mb-3">
        <div class="col-auto">
            <label class="form-label">Fecha Inicio</label>
            <InputDate class="form-control" @bind-Value="filtros.FechaInicio" />
            <ValidationMessage For="@(() => filtros.FechaInicio)" />
        </div>
        <div class="col-auto">
            <label class="form-label">Fecha Fin</label>
            <InputDate class="form-control" @bind-Value="filtros.FechaFin" />
            <ValidationMessage For="@(() => filtros.FechaFin)" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">
                <i class="fa fa-search me-1"></i>Buscar
            </button>
        </div>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>Tipo</th>
            <th>Fecha</th>
            <th>Fondo Monetario</th>
            <th>Monto</th>
            <th>Descripci√≥n</th>
        </tr>
    </thead>
    <tbody>
        @if (movimientos.Count == 0)
        {
            <tr><td colspan="5" class="text-center">No hay movimientos para mostrar.</td></tr>
        }
        else
        {
            @foreach (var m in movimientos)
            {
                <tr>
                    <td>@m.Tipo</td>
                    <td>@m.Fecha.ToShortDateString()</td>
                    <td>@m.FondoMonetarioNombre</td>
                    <td>@m.Monto.ToString("C")</td>
                    <td>@m.Descripcion</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<MovimientoDto> movimientos = new();
    private string? errorMessage;

    private FiltrosModel filtros = new()
    {
        FechaInicio = DateTime.Today.AddMonths(-1),
        FechaFin = DateTime.Today
    };

    public class FiltrosModel
    {
        [Required(ErrorMessage = "La fecha de inicio es obligatoria.")]
        public DateTime FechaInicio { get; set; }

        [Required(ErrorMessage = "La fecha de fin es obligatoria.")]
        public DateTime FechaFin { get; set; }
    }

    private async Task BuscarMovimientos()
    {
        errorMessage = null;
        try
        {
            var url = $"api/Movimientos?fechaInicio={filtros.FechaInicio:yyyy-MM-dd}&fechaFin={filtros.FechaFin:yyyy-MM-dd}";
            movimientos = await Http.GetFromJsonAsync<List<MovimientoDto>>(url) ?? new List<MovimientoDto>();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error al obtener los movimientos: {ex.Message}";
        }
        catch (System.Text.Json.JsonException ex)
        {
            errorMessage = $"Error de formato de datos: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

  
}