@page "/tipos-gasto"
@inject HttpClient Http
@inject IJSRuntime JS
@using ControlGastos.Core.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@attribute [Authorize]

<h3 class="mb-4"><i class="fa fa-tags me-2"></i>Tipos de Gasto</h3>

<button class="btn btn-warning mb-3" @onclick="NuevoTipoGasto">
    <i class="fa fa-plus me-1"></i> Nuevo Tipo de Gasto
</button>

<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Código</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (tiposGasto.Count == 0)
        {
            <tr><td colspan="5" class="text-center">No hay tipos de gasto para mostrar.</td></tr>
        }
        else
        {
            @foreach (var t in tiposGasto)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Codigo</td>
                    <td>@t.Nombre</td>
                    <td>@t.Descripcion</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditTipoGasto(t)"><i class="fa fa-pencil-alt"></i></button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTipoGasto(t)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<!-- Modal Bootstrap -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editando ? "Editar Tipo de Gasto" : "Nuevo Tipo de Gasto")</h5>
                <button type="button" class="btn-close" @onclick="() => modalVisible = false"></button>
            </div>
            <form @onsubmit="GuardarTipoGastoAsync">
                <div class="modal-body">
                    @if (editando && !string.IsNullOrEmpty(tipoGastoEdit.Codigo))
                    {
                        <div class="mb-3">
                            <label class="form-label">Código</label>
                            <input class="form-control" value="@tipoGastoEdit.Codigo" readonly />
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <input class="form-control" value="@tipoGastoEdit.Nombre" @oninput="e => tipoGastoEdit.Nombre = e.Value?.ToString()" />
                        @if (!string.IsNullOrWhiteSpace(errorMessage) && errorMessage.Contains("nombre"))
                        {
                            <div class="text-danger small">@errorMessage</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <input class="form-control" value="@tipoGastoEdit.Descripcion" @oninput="e => tipoGastoEdit.Descripcion = e.Value?.ToString()" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-save me-1"></i>Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalVisible = false">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    List<TipoGastoDto> tiposGasto = new();
    TipoGastoDto tipoGastoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposGastoAsync();
    }

    async Task CargarTiposGastoAsync()
    {
        errorMessage = null; 
        try
        {
            var response = await Http.GetAsync("api/TipoGasto");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                tiposGasto = System.Text.Json.JsonSerializer.Deserialize<List<TipoGastoDto>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<TipoGastoDto>();
            }
            else
            {
                errorMessage = $"Error al cargar tipos de gasto: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Excepción al cargar tipos de gasto: {ex.Message}";
        }
    }

    void NuevoTipoGasto()
    {
        tipoGastoEdit = new TipoGastoDto();
        editando = false;
        errorMessage = null;
        modalVisible = true;
    }

    async Task GuardarTipoGastoAsync()
    {
        errorMessage = null;
        if (string.IsNullOrWhiteSpace(tipoGastoEdit.Nombre))
        {
            errorMessage = "El nombre es obligatorio.";
            return;
        }
        if (!editando && string.IsNullOrWhiteSpace(tipoGastoEdit.Codigo))
        {
            tipoGastoEdit.Codigo = null;
        }
        try
        {
            HttpResponseMessage response;
            var json = System.Text.Json.JsonSerializer.Serialize(tipoGastoEdit);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            if (editando)
            {
                response = await Http.PutAsync($"api/TipoGasto/{tipoGastoEdit.Id}", content);
            }
            else
            {
                response = await Http.PostAsync("api/TipoGasto", content);
            }
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {response.ReasonPhrase} - {errorContent}";
                return; 
            }
            modalVisible = false; 
            await CargarTiposGastoAsync(); 
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al guardar: {ex.Message}";
        }
        StateHasChanged(); 
    }

    void EditTipoGasto(TipoGastoDto tipo)
    {
        tipoGastoEdit = new TipoGastoDto 
        { 
            Id = tipo.Id, 
            Codigo = tipo.Codigo,
            Nombre = tipo.Nombre, 
            Descripcion = tipo.Descripcion 
        };
        editando = true;
        errorMessage = null;
        modalVisible = true;
    }

    async Task DeleteTipoGasto(TipoGastoDto tipo)
    {
        errorMessage = null;
        if (!await JS.InvokeAsync<bool>("confirm", $"¿Eliminar '{tipo.Nombre}'?")) return;
        try
        {
            var response = await Http.DeleteAsync($"api/TipoGasto/{tipo.Id}");
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al eliminar: {response.ReasonPhrase} - {errorContent}";
            }
            await CargarTiposGastoAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al eliminar: {ex.Message}";
        }
        StateHasChanged();
    }
}