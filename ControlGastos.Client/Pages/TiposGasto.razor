@page "/tipos-gasto"
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>Tipos de Gasto</PageTitle>

<Heading Size="HeadingSize.Is3">Tipos de Gasto</Heading>

<DataGrid TItem="TipoGastoDto" Data="tiposGasto" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="TipoGastoDto" Field="@nameof(TipoGastoDto.Id)" Caption="ID" />
        <DataGridColumn TItem="TipoGastoDto" Field="@nameof(TipoGastoDto.Codigo)" Caption="C贸digo" />
        <DataGridColumn TItem="TipoGastoDto" Field="@nameof(TipoGastoDto.Nombre)" Caption="Nombre" />
        <DataGridColumn TItem="TipoGastoDto" Field="@nameof(TipoGastoDto.Descripcion)" Caption="Descripci贸n" />
        <DataGridCommandColumn TItem="TipoGastoDto" />
    </DataGridColumns>
</DataGrid>

<ModalBody>
    <Validations @ref="validator" Model="tipoGastoEdit">
        <Validator For="@(() => tipoGastoEdit.Nombre)">
            <Field>
                <FieldLabel>Nombre</FieldLabel>
                <TextEdit @bind-Text="tipoGastoEdit.Nombre" Placeholder="Nombre del tipo de gasto" />
                <ValidationMessage />
            </Field>
        </Validator>
        <Validator For="@(() => tipoGastoEdit.Descripcion)">
            <Field>
                <FieldLabel>Descripci贸n</FieldLabel>
                <TextEdit @bind-Text="tipoGastoEdit.Descripcion" Placeholder="Descripci贸n (opcional)" />
                <ValidationMessage />
            </Field>
        </Validator>
    </Validations>
    <Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>
</ModalBody>

<Button Color="Color.Success" Clicked="NuevoTipoGasto">Nuevo Tipo de Gasto</Button>

@code {
    List<TipoGastoDto> tiposGasto = new();
    TipoGastoDto tipoGastoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    Validations? validator;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposGastoAsync();
    }

    async Task CargarTiposGastoAsync()
    {
        tiposGasto = await Http.GetFromJsonAsync<List<TipoGastoDto>>("api/TipoGasto") ?? new();
    }

    void NuevoTipoGasto()
    {
        tipoGastoEdit = new TipoGastoDto();
        editando = false;
        modalVisible = true;
    }

    async Task GuardarTipoGastoAsync()
    {
        errorMessage = null;
        if (validator is null || !await validator.ValidateAll()) return;
        try
        {
            HttpResponseMessage response;
            if (editando)
                response = await Http.PutAsJsonAsync($"api/TipoGasto/{tipoGastoEdit.Id}", tipoGastoEdit);
            else
                response = await Http.PostAsJsonAsync("api/TipoGasto", tipoGastoEdit);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {error}";
                return;
            }
            modalVisible = false;
            await CargarTiposGastoAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    void EditTipoGasto(TipoGastoDto tipo)
    {
        tipoGastoEdit = new TipoGastoDto { Id = tipo.Id, Codigo = tipo.Codigo, Nombre = tipo.Nombre, Descripcion = tipo.Descripcion };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteTipoGasto(TipoGastoDto tipo)
    {
        await Http.DeleteAsync($"api/TipoGasto/{tipo.Id}");
        await CargarTiposGastoAsync();
    }
}
