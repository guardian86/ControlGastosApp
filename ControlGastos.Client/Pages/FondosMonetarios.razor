@page "/fondos-monetarios"
@inject HttpClient Http
@attribute [Authorize]

@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Validation

<PageTitle>Fondos Monetarios</PageTitle>

<Heading Size="HeadingSize.Is3">Fondos Monetarios</Heading>

<DataGrid TItem="FondoMonetarioDto" Data="fondos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Id)" Caption="ID" />
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Nombre)" Caption="Nombre" />
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Tipo)" Caption="Tipo" />
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Descripcion)" Caption="Descripción" />
        <DataGridCommandColumn TItem="FondoMonetarioDto" Caption="Acciones" TextAlignment="TextAlignment.Center">
            <DisplayTemplate>
                <ComandosFila TItem="FondoMonetarioDto"
                              Item="context"
                              OnEdit="EditFondo"
                              OnDelete="DeleteFondo" />
            </DisplayTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class="text-center p-4">No hay fondos monetarios para mostrar.</div>
    </EmptyTemplate>
</DataGrid>

<Modal @bind-Visible="modalVisible">
    <ModalHeader>@(editando ? "Editar Fondo Monetario" : "Nuevo Fondo Monetario")</ModalHeader>
    <ModalBody>
        <Validations @ref="validator" Model="fondoEdit">
            <Validator For="@(() => fondoEdit.Nombre)">
                <Field>
                    <FieldLabel>Nombre</FieldLabel>
                    <TextEdit @bind-Text="fondoEdit.Nombre" Placeholder="Nombre" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validations @ref="validator" Model="fondoEdit">
                <Validator For="@(() => fondoEdit.Tipo)">
                    <Field>
                        <FieldLabel>Tipo</FieldLabel>
                        <Select TValue="string" @bind-Value="fondoEdit.Tipo">
                            <SelectItem TValue="string" Value="@(null)">-- Seleccione un tipo --</SelectItem>
                            <SelectItem Value="1">Cuenta Bancaria</SelectItem>
                            <SelectItem Value="2">Caja Menuda</SelectItem>
                        </Select>
                        <ValidationMessage />
                    </Field>
                </Validator>
            </Validations>
            <p>Valor actual de fondoEdit.Tipo: @fondoEdit.Tipo</p> <Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>
            <Validator For="@(() => fondoEdit.Descripcion)">
                <Field>
                    <FieldLabel>Descripción</FieldLabel>
                    <TextEdit @bind-Text="fondoEdit.Descripcion" Placeholder="Descripción" />
                    <ValidationMessage />
                </Field>
            </Validator>
        </Validations>
        <Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="GuardarFondoAsync">Guardar</Button>
        <Button Color="Color.Secondary" Clicked="() => modalVisible = false">Cancelar</Button>
    </ModalFooter>
</Modal>

<Button Color="Color.Success" Clicked="NuevoFondo">Nuevo Fondo Monetario</Button>

@code {
    List<FondoMonetarioDto> fondos = new();
    FondoMonetarioDto fondoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    Validations? validator;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarFondosAsync();
    }

    async Task CargarFondosAsync()
    {
        fondos = await Http.GetFromJsonAsync<List<FondoMonetarioDto>>("api/FondoMonetario") ?? new();
    }

    void NuevoFondo()
    {
        fondoEdit = new FondoMonetarioDto { Tipo = "1" };
        editando = false;
        modalVisible = true;
        if (validator != null) validator.ClearAll();
    }

    private async Task GuardarFondoAsync()
    {
        errorMessage = null;
        if (!(await (validator?.ValidateAll() ?? Task.FromResult(false)))) return; // Validación más concisa
        try
        {
            // Determina el método HTTP según el estado de edición
            var endpoint = editando ? $"api/FondoMonetario/{fondoEdit.Id}" : "api/FondoMonetario";
            var response = editando
                ? await Http.PutAsJsonAsync(endpoint, fondoEdit)
                : await Http.PostAsJsonAsync(endpoint, fondoEdit);

            await ProcesarRespuestaAsync(response);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
            Console.WriteLine(errorMessage); // Para depuración
        }
    }

    private async Task ProcesarRespuestaAsync(HttpResponseMessage response)
    {
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = $"Error al guardar: {error}";
            Console.WriteLine(errorMessage); // Para depuración
            return;
        }

        modalVisible = false;
        await CargarFondosAsync();
    }

    void EditFondo(FondoMonetarioDto fondo)
    {
        fondoEdit = new FondoMonetarioDto { Id = fondo.Id, Nombre = fondo.Nombre, Tipo = fondo.Tipo, Descripcion = fondo.Descripcion };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteFondo(FondoMonetarioDto fondo)
    {
        await Http.DeleteAsync($"api/FondoMonetario/{fondo.Id}");
        await CargarFondosAsync();
    }
}
