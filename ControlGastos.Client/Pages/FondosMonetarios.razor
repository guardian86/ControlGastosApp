@page "/fondos-monetarios"  
@inject HttpClient Http  


<PageTitle>Fondos Monetarios</PageTitle>  

<Heading Size="HeadingSize.Is3">Fondos Monetarios</Heading>  

<DataGrid TItem="FondoMonetarioDto" Data="fondos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">  
    <DataGridColumns>  
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Id)" Caption="ID" />  
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Nombre)" Caption="Nombre" />  
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Tipo)" Caption="Tipo" />  
        <DataGridColumn TItem="FondoMonetarioDto" Field="@nameof(FondoMonetarioDto.Descripcion)" Caption="Descripción" />  
        <DataGridCommandColumn TItem="FondoMonetarioDto" />  
    </DataGridColumns>  
</DataGrid>  

<Modal @bind-Visible="modalVisible">
    <ModalHeader>@(editando ? "Editar Fondo Monetario" : "Nuevo Fondo Monetario")</ModalHeader>
    <ModalBody>
        <Validations @ref="validator" Model="fondoEdit">
            <Validator For="@(() => fondoEdit.Nombre)">
                <Field>
                    <FieldLabel>Nombre</FieldLabel>
                    <TextEdit @bind-Text="fondoEdit.Nombre" Placeholder="Nombre" />
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => fondoEdit.Tipo)">
                <Field>
                    <FieldLabel>Tipo</FieldLabel>
                    <Select TValue="string" @bind-Value="fondoEdit.Tipo">
                        <SelectItem Value="CuentaBancaria">Cuenta Bancaria</SelectItem>
                        <SelectItem Value="CajaMenuda">Caja Menuda</SelectItem>
                    </Select>
                    <ValidationMessage />
                </Field>
            </Validator>
            <Validator For="@(() => fondoEdit.Descripcion)">
                <Field>
                    <FieldLabel>Descripción</FieldLabel>
                    <TextEdit @bind-Text="fondoEdit.Descripcion" Placeholder="Descripción" />
                    <ValidationMessage />
                </Field>
            </Validator>
        </Validations>
        <Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="GuardarFondoAsync">Guardar</Button>
        <Button Color="Color.Secondary" Clicked="()=>modalVisible=false">Cancelar</Button>
    </ModalFooter>
</Modal>  

<Button Color="Color.Success" Clicked="NuevoFondo">Nuevo Fondo Monetario</Button>  

@code {  
    List<FondoMonetarioDto> fondos = new();  
    FondoMonetarioDto fondoEdit = new();  
    bool modalVisible = false;  
    bool editando = false;  
    Validations? validator;  
    string? errorMessage;

    protected override async Task OnInitializedAsync()  
    {  
        await CargarFondosAsync();  
    }  

    async Task CargarFondosAsync()  
    {  
        fondos = await Http.GetFromJsonAsync<List<FondoMonetarioDto>>("api/FondoMonetario") ?? new();  
    }  

    void NuevoFondo()  
    {  
        fondoEdit = new FondoMonetarioDto();  
        editando = false;  
        modalVisible = true;  
    }  

    async Task GuardarFondoAsync()  
    {  
        errorMessage = null;
        if (validator is null || !await validator.ValidateAll()) return;  
        try  
        {  
            HttpResponseMessage response;  
            if (editando)  
                response = await Http.PutAsJsonAsync($"api/FondoMonetario/{fondoEdit.Id}", fondoEdit);  
            else  
                response = await Http.PostAsJsonAsync("api/FondoMonetario", fondoEdit);  
            if (!response.IsSuccessStatusCode)  
            {  
                var error = await response.Content.ReadAsStringAsync();  
                errorMessage = $"Error al guardar: {error}";  
                return;  
            }  
            modalVisible = false;  
            await CargarFondosAsync();  
        }  
        catch (Exception ex)  
        {  
            errorMessage = $"Error inesperado: {ex.Message}";  
        }  
    }  

    void EditFondo(FondoMonetarioDto fondo)  
    {  
        fondoEdit = new FondoMonetarioDto { Id = fondo.Id, Nombre = fondo.Nombre, Tipo = fondo.Tipo, Descripcion = fondo.Descripcion };  
        editando = true;  
        modalVisible = true;  
    }  

    async Task DeleteFondo(FondoMonetarioDto fondo)  
    {  
        await Http.DeleteAsync($"api/FondoMonetario/{fondo.Id}");  
        await CargarFondosAsync();  
    }  
}
