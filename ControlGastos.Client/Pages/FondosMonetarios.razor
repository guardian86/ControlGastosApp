@page "/fondos-monetarios"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

<PageTitle>Fondos Monetarios</PageTitle>

<h3 class="mb-4"><i class="fa fa-wallet me-2"></i>Fondos Monetarios</h3>

<button class="btn btn-success mb-3" @onclick="NuevoFondo">
    <i class="fa fa-plus me-1"></i> Nuevo Fondo Monetario
</button>

<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Tipo</th>
            <th>Descripci칩n</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (fondos.Count == 0)
        {
            <tr><td colspan="5" class="text-center">No hay fondos monetarios para mostrar.</td></tr>
        }
        else
        {
            @foreach (var f in fondos)
            {
                <tr>
                    <td>@f.Id</td>
                    <td>@f.Nombre</td>
                    <td>@(f.Tipo == "1" ? "Cuenta Bancaria" : f.Tipo == "2" ? "Caja Menuda" : "-")</td>
                    <td>@f.Descripcion</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditFondo(f)"><i class="fa fa-pencil-alt"></i></button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteFondo(f)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<!-- Modal Bootstrap -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editando ? "Editar Fondo Monetario" : "Nuevo Fondo Monetario")</h5>
                <button type="button" class="btn-close" @onclick="() => modalVisible = false"></button>
            </div>
            <EditForm Model="fondoEdit" OnValidSubmit="GuardarFondoAsync">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <InputText class="form-control" @bind-Value="fondoEdit.Nombre" />
                        <ValidationMessage For="@(() => fondoEdit.Nombre)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tipo</label>
                        <InputSelect class="form-select" @bind-Value="fondoEdit.Tipo">
                            <option value="">-- Seleccione un tipo --</option>
                            <option value="1">Cuenta Bancaria</option>
                            <option value="2">Caja Menuda</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => fondoEdit.Tipo)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripci칩n</label>
                        <InputText class="form-control" @bind-Value="fondoEdit.Descripcion" />
                        <ValidationMessage For="@(() => fondoEdit.Descripcion)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-save me-1"></i>Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalVisible = false">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    List<FondoMonetarioDto> fondos = new();
    FondoMonetarioDto fondoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarFondosAsync();
    }

    async Task CargarFondosAsync()
    {
        try
        {
            fondos = await Http.GetFromJsonAsync<List<FondoMonetarioDto>>("api/FondoMonetario") ?? new();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            errorMessage = "No est치 autorizado. Por favor inicie sesi칩n para ver los fondos monetarios.";
            fondos = new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
            fondos = new();
        }
    }

    void NuevoFondo()
    {
        fondoEdit = new FondoMonetarioDto { Tipo = "1" };
        editando = false;
        modalVisible = true;
    }

    private async Task GuardarFondoAsync()
    {
        errorMessage = null;
        if (string.IsNullOrWhiteSpace(fondoEdit.Nombre) || string.IsNullOrWhiteSpace(fondoEdit.Tipo))
        {
            errorMessage = "El nombre y el tipo son obligatorios.";
            return;
        }
        try
        {
            var endpoint = editando ? $"api/FondoMonetario/{fondoEdit.Id}" : "api/FondoMonetario";
            var response = editando
                ? await Http.PutAsJsonAsync(endpoint, fondoEdit)
                : await Http.PostAsJsonAsync(endpoint, fondoEdit);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {error}";
                return;
            }

            modalVisible = false;
            await CargarFondosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    void EditFondo(FondoMonetarioDto fondo)
    {
        fondoEdit = new FondoMonetarioDto { Id = fondo.Id, Nombre = fondo.Nombre, Tipo = fondo.Tipo, Descripcion = fondo.Descripcion };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteFondo(FondoMonetarioDto fondo)
    {
        await Http.DeleteAsync($"api/FondoMonetario/{fondo.Id}");
        await CargarFondosAsync();
    }
}
