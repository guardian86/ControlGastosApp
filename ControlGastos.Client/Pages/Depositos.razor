@page "/depositos"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

<PageTitle>Depósitos</PageTitle>

<h3 class="mb-4"><i class="fa fa-piggy-bank me-2"></i>Depósitos</h3>

<button class="btn btn-success mb-3" @onclick="NuevoDeposito">
    <i class="fa fa-plus me-1"></i> Nuevo Depósito
</button>

<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Fecha</th>
            <th>Fondo Monetario</th>
            <th>Monto</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (depositos.Count == 0)
        {
            <tr><td colspan="5" class="text-center">No hay depósitos para mostrar.</td></tr>
        }
        else
        {
            @foreach (var d in depositos)
            {
                <tr>
                    <td>@d.Id</td>
                    <td>@d.Fecha.ToShortDateString()</td>
                    <td>@d.FondoMonetarioNombre</td>
                    <td>@d.Monto.ToString("C")</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditDeposito(d)"><i class="fa fa-edit"></i></button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteDeposito(d)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<!-- Modal Bootstrap -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editando ? "Editar Depósito" : "Nuevo Depósito")</h5>
                <button type="button" class="btn-close" @onclick="() => modalVisible = false"></button>
            </div>
            <EditForm Model="depositoEdit" OnValidSubmit="GuardarDepositoAsync">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">Fecha</label>
                        <InputDate class="form-control" @bind-Value="depositoEdit.Fecha" />
                        <ValidationMessage For="@(() => depositoEdit.Fecha)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fondo Monetario</label>
                        <InputSelect class="form-select" @bind-Value="depositoEdit.FondoMonetarioId">
                            <option value="0">-- Seleccione un fondo --</option>
                            @foreach (var fondo in fondosMonetariosDisponibles)
                            {
                                <option value="@fondo.Id">@fondo.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => depositoEdit.FondoMonetarioId)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Monto</label>
                        <InputNumber class="form-control" @bind-Value="depositoEdit.Monto" step="0.01" />
                        <ValidationMessage For="@(() => depositoEdit.Monto)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-save me-1"></i>Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalVisible = false">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    List<DepositoDto> depositos = new();
    DepositoDto depositoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    string? errorMessage;
    List<FondoMonetarioDto> fondosMonetariosDisponibles = new List<FondoMonetarioDto>();

    protected override async Task OnInitializedAsync()
    {
        await CargarFondosMonetariosDisponiblesAsync();
        await CargarDepositosAsync();
    }

    async Task CargarDepositosAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/Depositos");
            if (response.IsSuccessStatusCode)
            {
                depositos = await response.Content.ReadFromJsonAsync<List<DepositoDto>>() ?? new List<DepositoDto>();
            }
            else
            {
                errorMessage = $"Error al cargar depósitos: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Excepción al cargar depósitos: {ex.Message}";
        }
    }

    void NuevoDeposito()
    {
        depositoEdit = new DepositoDto { Fecha = DateTime.Today };
        editando = false;
        errorMessage = null;
        modalVisible = true;
    }

    async Task GuardarDepositoAsync()
    {
        errorMessage = null;
        if (depositoEdit.Fecha == default || depositoEdit.FondoMonetarioId == 0 || depositoEdit.Monto <= 0)
        {
            errorMessage = "Todos los campos son obligatorios y el monto debe ser mayor a 0.";
            return;
        }
        var fondo = fondosMonetariosDisponibles.FirstOrDefault(f => f.Id == depositoEdit.FondoMonetarioId);
        depositoEdit.FondoMonetarioNombre = fondo?.Nombre;
        try
        {
            HttpResponseMessage response;
            if (editando)
            {
                response = await Http.PutAsJsonAsync($"api/Depositos/{depositoEdit.Id}", depositoEdit);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Depositos", depositoEdit);
            }

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {response.ReasonPhrase} - {errorContent}";
                return;
            }

            modalVisible = false;
            await CargarDepositosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al guardar: {ex.Message}";
        }
    }

    void EditDeposito(DepositoDto deposito)
    {
        depositoEdit = new DepositoDto
        {
            Id = deposito.Id,
            Fecha = deposito.Fecha,
            FondoMonetarioId = deposito.FondoMonetarioId,
            FondoMonetarioNombre = deposito.FondoMonetarioNombre,
            Monto = deposito.Monto
        };
        editando = true;
        errorMessage = null;
        modalVisible = true;
    }

    async Task DeleteDeposito(DepositoDto deposito)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Depositos/{deposito.Id}");
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al eliminar: {response.ReasonPhrase} - {errorContent}";
            }
            await CargarDepositosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al eliminar: {ex.Message}";
        }
    }

    async Task CargarFondosMonetariosDisponiblesAsync()
    {
        try
        {
            fondosMonetariosDisponibles = await Http.GetFromJsonAsync<List<FondoMonetarioDto>>("api/FondoMonetario") ?? new List<FondoMonetarioDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar fondos monetarios: {ex.Message}";
        }
    }
}