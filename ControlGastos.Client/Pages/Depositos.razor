@page "/depositos"
@inject HttpClient Http


<PageTitle>Depósitos</PageTitle>

<Heading Size="HeadingSize.Is3">Depósitos</Heading>

<DataGrid TItem="DepositoDto" Data="depositos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="DepositoDto" Field="@nameof(DepositoDto.Id)" Caption="ID" />
        <DataGridColumn TItem="DepositoDto" Field="@nameof(DepositoDto.Fecha)" Caption="Fecha" />
        <DataGridColumn TItem="DepositoDto" Field="@nameof(DepositoDto.FondoMonetarioNombre)" Caption="Fondo Monetario" />
        <DataGridColumn TItem="DepositoDto" Field="@nameof(DepositoDto.Monto)" Caption="Monto" />
        <DataGridCommandColumn TItem="DepositoDto" />
    </DataGridColumns>
</DataGrid>

<Validator For="@(() => depositoEdit.FondoMonetarioNombre)">
    <Field>
        <FieldLabel>Fondo Monetario</FieldLabel>
        <Select TValue="int" @bind-Value="depositoEdit.FondoMonetarioNombre">
            <SelectItem TValue="int" Value="0">-- Seleccione un fondo --</SelectItem>
            @if (fondosMonetariosDisponibles != null)
            {
                @foreach (var fondo in fondosMonetariosDisponibles)
                {
                    <SelectItem TValue="int" Value="@fondo.Id">@fondo.Nombre</SelectItem>
                }
            }
        </Select>
        <ValidationMessage />
    </Field>
</Validator>

<Button Color="Color.Success" Clicked="NuevoDeposito">Nuevo Depósito</Button>

@code {
    List<DepositoDto> depositos = new();
    DepositoDto depositoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    Validations? validator;
    string? errorMessage;

    List<FondoMonetarioDto> fondosMonetariosDisponibles = new List<FondoMonetarioDto>();


    protected override async Task OnInitializedAsync()
    {
        await CargarFondosMonetariosDisponiblesAsync();
        //await CargarDepositosAsync();
    }

    async Task CargarDepositosAsync()
    {
        depositos = await Http.GetFromJsonAsync<List<DepositoDto>>("api/Depositos") ?? new();
    }

    void NuevoDeposito()
    {
        depositoEdit = new DepositoDto();
        editando = false;
        modalVisible = true;
    }

    async Task GuardarDepositoAsync()
    {
        errorMessage = null;
        if (validator is null || !await validator.ValidateAll()) return;
        try
        {
            HttpResponseMessage response;
            if (editando)
                response = await Http.PutAsJsonAsync($"api/Depositos/{depositoEdit.Id}", depositoEdit);
            else
                response = await Http.PostAsJsonAsync("api/Depositos", depositoEdit);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al guardar: {error}";
                return;
            }
            modalVisible = false;
            await CargarDepositosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    void EditDeposito(DepositoDto deposito)
    {
        depositoEdit = new DepositoDto { Id = deposito.Id, Fecha = deposito.Fecha, FondoMonetarioNombre = deposito.FondoMonetarioNombre, Monto = deposito.Monto };
        editando = true;
        modalVisible = true;
    }

    async Task DeleteDeposito(DepositoDto deposito)
    {
        await Http.DeleteAsync($"api/Depositos/{deposito.Id}");
        await CargarDepositosAsync();
    }


    async Task CargarFondosMonetariosDisponiblesAsync()
    {
        try
        {

            fondosMonetariosDisponibles = await Http.GetFromJsonAsync<List<FondoMonetarioDto>>("api/FondoMonetario") ?? new List<FondoMonetarioDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar fondos monetarios: {ex.Message}";
        }
    }
}
