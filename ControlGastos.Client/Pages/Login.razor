@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JS

<PageTitle>Iniciar Sesión</PageTitle>
<Heading Size="HeadingSize.Is3">Iniciar Sesión</Heading>

<Validations @ref="validator" Model="loginModel">
    <Field>
        <FieldLabel>Usuario</FieldLabel>
        <TextEdit @bind-Text="loginModel.UserName" />
        <ValidationMessage TValue="string" For="@(() => loginModel.UserName)" />
    </Field>
    <Field>
        <FieldLabel>Contraseña</FieldLabel>
        <TextEdit @bind-Text="loginModel.Password" Type="TextEditType.Password" />
        <ValidationMessage TValue="string" For="@(() => loginModel.Password)" />
    </Field>
    <Button Color="Color.Primary" Clicked="LoginAsync">Ingresar</Button>
</Validations>

<Alert Color="Color.Danger" Visible="@(!string.IsNullOrEmpty(errorMessage))">@errorMessage</Alert>

@code {
    private LoginModel loginModel = new();
    private Validations? validator;
    private string errorMessage = string.Empty;

    public class LoginModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task LoginAsync()
    {
        errorMessage = string.Empty;
        if (validator is null) return;
        if (!await validator.ValidateAll()) return;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Usuarios/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result is not null && !string.IsNullOrEmpty(result.Token))
                {
                    await AuthService.SetTokenAsync(result.Token);
                    AuthService.AttachTokenToHttpClient(Http, result.Token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "No se recibió un token válido.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error de autenticación: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex}";
        }
    }

    public class LoginResult
    {
        public string Token { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}