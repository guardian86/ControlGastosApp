@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JS

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container mt-5" style="max-width:400px;">
    <div class="card shadow">
        <div class="card-body">
            <h3 class="mb-4 text-center"><i class="fa fa-user-circle me-2"></i>Iniciar Sesión</h3>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label class="form-label">Usuario</label>
                    <InputText class="form-control" @bind-value="loginModel.UserName" />
                    <ValidationMessage For="@(() => loginModel.UserName)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-value="loginModel.Password" type="password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fa fa-sign-in-alt me-1"></i>Ingresar
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es obligatorio.")]
        public string? UserName { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string? Password { get; set; }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/Usuarios/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result is not null && !string.IsNullOrEmpty(result.Token))
                {
                    await AuthService.SetTokenAsync(result.Token);
                    AuthService.AttachTokenToHttpClient(Http, result.Token);
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "No se recibió un token válido.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error de autenticación: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex}";
        }
    }

    public class LoginResult
    {
        public string? Token { get; set; }
    }
}