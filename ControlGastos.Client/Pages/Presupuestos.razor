@page "/presupuestos"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

<PageTitle>Presupuestos</PageTitle>

<h3 class="mb-4"><i class="fa fa-wallet me-2"></i>Presupuesto por Tipo de Gasto</h3>

<button class="btn btn-success mb-3" @onclick="NuevoPresupuesto">
    <i class="fa fa-plus me-1"></i> Nuevo Presupuesto
</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}


<table class="table table-striped table-bordered table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Usuario</th>
            <th>Tipo de Gasto</th>
            <th>Mes</th>
            <th>Año</th>
            <th>Monto</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (presupuestos.Count == 0)
        {
            <tr><td colspan="7" class="text-center">No hay presupuestos para mostrar.</td></tr>
        }
        else
        {
            @foreach (var p in presupuestos)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.UsuarioId</td>
                    <td>@p.TipoGastoNombre</td>
                    <td>@p.Mes</td>
                    <td>@p.Anio</td>
                    <td>@p.MontoPresupuestado.ToString("C")</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditPresupuesto(p)"><i class="fa fa-pencil-alt"></i></button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeletePresupuesto(p)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Modal Bootstrap -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.3);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editando ? "Editar Presupuesto" : "Nuevo Presupuesto")</h5>
                <button type="button" class="btn-close" @onclick="() => modalVisible = false"></button>
            </div>
            <EditForm Model="presupuestoEdit" OnValidSubmit="GuardarPresupuestoAsync">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">Usuario ID</label>
                        <InputNumber class="form-control" @bind-Value="presupuestoEdit.UsuarioId" />
                        <ValidationMessage For="@(() => presupuestoEdit.UsuarioId)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tipo de Gasto</label>
                        <InputSelect class="form-select" @bind-Value="presupuestoEdit.TipoGastoId">
                            <option value="0">-- Seleccione un tipo de gasto --</option>
                            @foreach (var tipo in tiposDeGastoDisponibles)
                            {
                                <option value="@tipo.Id">@tipo.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => presupuestoEdit.TipoGastoId)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mes (1-12)</label>
                        <InputNumber class="form-control" @bind-Value="presupuestoEdit.Mes" min="1" max="12" />
                        <ValidationMessage For="@(() => presupuestoEdit.Mes)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Año</label>
                        <InputNumber class="form-control" @bind-Value="presupuestoEdit.Anio" min="2020" max="2050" />
                        <ValidationMessage For="@(() => presupuestoEdit.Anio)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Monto Presupuestado</label>
                        <InputNumber class="form-control" @bind-Value="presupuestoEdit.MontoPresupuestado" step="0.01" />
                        <ValidationMessage For="@(() => presupuestoEdit.MontoPresupuestado)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-save me-1"></i>Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => modalVisible = false">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    List<TipoGastoDto> tiposDeGastoDisponibles = new();
    List<PresupuestoDto> presupuestos = new();
    PresupuestoDto presupuestoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposDeGastoDisponiblesAsync();
        await CargarPresupuestosAsync();
    }

    async Task CargarPresupuestosAsync()
    {
        try
        {
            presupuestos = await Http.GetFromJsonAsync<List<PresupuestoDto>>("api/Presupuestos") ?? new();
            errorMessage = null;
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                presupuestos = new();
                errorMessage = "No está autorizado. Por favor inicie sesión para ver los presupuestos.";
            }
            else
            {
                presupuestos = new();
                errorMessage = $"Error al cargar presupuestos: {ex.Message}";
            }
        }
    }

    async Task CargarTiposDeGastoDisponiblesAsync()
    {
        try
        {
            tiposDeGastoDisponibles = await Http.GetFromJsonAsync<List<TipoGastoDto>>("api/TipoGasto") ?? new();
            errorMessage = null;
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                tiposDeGastoDisponibles = new();
                errorMessage = $"Error al cargar los presupuestos. {ex.Message}";
            }
            else
            {
                errorMessage = $"Error al cargar tipos de gasto: {ex.Message}";
            }
        }
    }

    void NuevoPresupuesto()
    {
        presupuestoEdit = new PresupuestoDto();
        editando = false;
        modalVisible = true;
    }

    async Task GuardarPresupuestoAsync()
    {
        var tipoGasto = tiposDeGastoDisponibles.FirstOrDefault(t => t.Id == presupuestoEdit.TipoGastoId);
        presupuestoEdit.TipoGastoNombre = tipoGasto?.Nombre;
        if (editando)
            await Http.PutAsJsonAsync($"api/Presupuestos/{presupuestoEdit.Id}", presupuestoEdit);
        else
            await Http.PostAsJsonAsync("api/Presupuestos", presupuestoEdit);
        modalVisible = false;
        await CargarPresupuestosAsync();
    }

    void EditPresupuesto(PresupuestoDto presupuesto)
    {
        presupuestoEdit = new PresupuestoDto {
            Id = presupuesto.Id,
            UsuarioId = presupuesto.UsuarioId,
            TipoGastoId = tiposDeGastoDisponibles.FirstOrDefault(t => t.Nombre == presupuesto.TipoGastoNombre)?.Id ?? 0,
            Mes = presupuesto.Mes,
            Anio = presupuesto.Anio,
            MontoPresupuestado = presupuesto.MontoPresupuestado
        };
        editando = true;
        modalVisible = true;
    }

    async Task DeletePresupuesto(PresupuestoDto presupuesto)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"¿Está seguro que desea eliminar el presupuesto de {presupuesto.TipoGastoNombre} ({presupuesto.Anio}-{presupuesto.Mes})?");
        if (!confirmed)
            return;
        await Http.DeleteAsync($"api/Presupuestos/{presupuesto.Id}");
        await CargarPresupuestosAsync();
    }
}
