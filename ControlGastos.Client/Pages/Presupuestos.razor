@page "/presupuestos"
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>Presupuestos</PageTitle>

<Heading Size="HeadingSize.Is3">Presupuesto por Tipo de Gasto</Heading>

<DataGrid TItem="PresupuestoDto" Data="presupuestos" AutoGenerateColumns="false" Responsive="true" Striped="true" Bordered="true">
    <DataGridColumns>
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.Id)" Caption="ID" />
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.UsuarioId)" Caption="Usuario" />
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.TipoGastoNombre)" Caption="Tipo de Gasto" />
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.Mes)" Caption="Mes" />
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.Anio)" Caption="Año" />
        <DataGridColumn TItem="PresupuestoDto" Field="@nameof(PresupuestoDto.MontoPresupuestado)" Caption="Monto" />
        <DataGridCommandColumn TItem="PresupuestoDto" Caption="Acciones" TextAlignment="TextAlignment.Center">
            <DisplayTemplate>
                <ComandosFila TItem="PresupuestoDto"
                              Item="context"
                              OnEdit="EditPresupuesto"
                              OnDelete="DeletePresupuesto" />
            </DisplayTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class="text-center p-4">No hay presupuestos para mostrar.</div>
    </EmptyTemplate>
</DataGrid>

<Modal @bind-Visible="modalVisible">
    <ModalHeader>
        <ModalTitle>@(editando ? "Editar Presupuesto" : "Nuevo Presupuesto")</ModalTitle>
        <CloseButton Clicked="() => modalVisible = false" />
    </ModalHeader>
    <ModalBody>
        <Validations @ref="validator" Model="presupuestoEdit">
            
            <Validator For="@(() => presupuestoEdit.UsuarioId)">
                <Field>
                    <FieldLabel>Usuario ID</FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="presupuestoEdit.UsuarioId" Placeholder="ID de Usuario" />
                    <ValidationMessage />
                </Field>
            </Validator>

            <Validator For="@(() => presupuestoEdit.TipoGastoId)">
                <Field>
                    <FieldLabel>Tipo de Gasto</FieldLabel>
                    <Select TValue="int" @bind-Value="presupuestoEdit.TipoGastoId">
                        <SelectItem TValue="int" Value="0">-- Seleccione un tipo de gasto --</SelectItem>
                        @if (tiposDeGastoDisponibles != null) // Asumiendo que tienes esta lista
                        {
                            @foreach (var tipoGasto in tiposDeGastoDisponibles)
                            {
                                <SelectItem TValue="int" Value="@tipoGasto.Id">@tipoGasto.Nombre</SelectItem> 
                                }
                        }
                    </Select>
                    <ValidationMessage />
                </Field>
            </Validator>

            <Validator For="@(() => presupuestoEdit.Mes)">
                <Field>
                    <FieldLabel>Mes (1-12)</FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="presupuestoEdit.Mes" Placeholder="Mes" Min="1" Max="12" />
                    <ValidationMessage />
                </Field>
            </Validator>

            <Validator For="@(() => presupuestoEdit.Anio)">
                <Field>
                    <FieldLabel>Año (ej. @DateTime.Now.Year)</FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="presupuestoEdit.Anio" Placeholder="Año" Min="2020" Max="2050" /> 
                    <ValidationMessage />
                </Field>
            </Validator>

            <Validator For="@(() => presupuestoEdit.MontoPresupuestado)">
                <Field>
                    <FieldLabel>Monto Presupuestado</FieldLabel>
                    <NumericEdit TValue="decimal" @bind-Value="presupuestoEdit.MontoPresupuestado" Placeholder="Monto" Step="0.01m" />
                    <ValidationMessage />
                </Field>
            </Validator>

        </Validations>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="GuardarPresupuestoAsync">Guardar</Button>
        <Button Color="Color.Secondary" Clicked="()=>modalVisible=false">Cancelar</Button>
    </ModalFooter>
</Modal>

<Button Color="Color.Success" Clicked="NuevoPresupuesto">Nuevo Presupuesto</Button>

@code {
    List<TipoGastoDto> tiposDeGastoDisponibles = new();
    List<PresupuestoDto> presupuestos = new();
    PresupuestoDto presupuestoEdit = new();
    bool modalVisible = false;
    bool editando = false;
    Validations? validator;

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposDeGastoDisponiblesAsync();
        await CargarPresupuestosAsync();
    }

    async Task CargarPresupuestosAsync()
    {
        presupuestos = await Http.GetFromJsonAsync<List<PresupuestoDto>>("api/Presupuestos") ?? new();
    }

    async Task CargarTiposDeGastoDisponiblesAsync()
    {
        tiposDeGastoDisponibles = await Http.GetFromJsonAsync<List<TipoGastoDto>>("api/TipoGasto") ?? new();
    }

    void NuevoPresupuesto()
    {
        presupuestoEdit = new PresupuestoDto();
        editando = false;
        modalVisible = true;
    }

    async Task GuardarPresupuestoAsync()
    {
        if (validator is null || !await validator.ValidateAll()) return;
        if (editando)
            await Http.PutAsJsonAsync($"api/Presupuestos/{presupuestoEdit.Id}", presupuestoEdit);
        else
            await Http.PostAsJsonAsync("api/Presupuestos", presupuestoEdit);
        modalVisible = false;
        await CargarPresupuestosAsync();
    }

    void EditPresupuesto(PresupuestoDto presupuesto)
    {
        presupuestoEdit = new PresupuestoDto { Id = presupuesto.Id, UsuarioId = presupuesto.UsuarioId, TipoGastoNombre = presupuesto.TipoGastoNombre, Mes = presupuesto.Mes, Anio = presupuesto.Anio, MontoPresupuestado = presupuesto.MontoPresupuestado };
        editando = true;
        modalVisible = true;
    }

    async Task DeletePresupuesto(PresupuestoDto presupuesto)
    {
        await Http.DeleteAsync($"api/Presupuestos/{presupuesto.Id}");
        await CargarPresupuestosAsync();
    }
}
