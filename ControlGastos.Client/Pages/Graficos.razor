@page "/graficos"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using ControlGastos.Core.DTOs
@inject IJSRuntime JS

<PageTitle>Gráfico Comparativo de Presupuesto y Ejecución</PageTitle>

<h3 class="mb-4"><i class="fa fa-chart-bar me-2"></i>Gráfico Comparativo de Presupuesto y Ejecución</h3>

<EditForm Model="filtroGrafico" OnValidSubmit="BuscarGrafico">
    <DataAnnotationsValidator />
    <div class="row g-3 align-items-end mb-3">
        <div class="col-auto">
            <label class="form-label">Fecha Inicio</label>
            <InputDate class="form-control" @bind-value="filtroGrafico.FechaInicio" />
            <ValidationMessage For="@(() => filtroGrafico.FechaInicio)" />
        </div>
        <div class="col-auto">
            <label class="form-label">Fecha Fin</label>
            <InputDate class="form-control" @bind-value="filtroGrafico.FechaFin" />
            <ValidationMessage For="@(() => filtroGrafico.FechaFin)" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary"><i class="fa fa-search me-1"></i>Buscar</button>
        </div>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="card mt-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-7">
                <canvas id="chartPresupuesto" height="120"></canvas>
            </div>
            <div class="col-md-5">
                <canvas id="chartPresupuestoPie" height="120"></canvas>
            </div>
        </div>
    </div>
</div>

@code {
    private FiltroGraficoDto filtroGrafico = new FiltroGraficoDto { FechaInicio = DateTime.Today.AddMonths(-1), FechaFin = DateTime.Today };
    private List<GraficoDto> datosParaElGrafico = new();
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && datosParaElGrafico.Count > 0)
        {
            await RenderizarGraficoAsync();
        }
    }

    private async Task BuscarGrafico()
    {
        errorMessage = null;
        if (filtroGrafico.FechaInicio == null || filtroGrafico.FechaFin == null)
        {
            errorMessage = "Debe ingresar ambas fechas.";
            return;
        }
        try
        {
            var url = $"api/Graficos?fechaInicio={filtroGrafico.FechaInicio:yyyy-MM-dd}&fechaFin={filtroGrafico.FechaFin:yyyy-MM-dd}";
            datosParaElGrafico = await Http.GetFromJsonAsync<List<GraficoDto>>(url) ?? new List<GraficoDto>();
            await RenderizarGraficoAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al buscar datos para el gráfico: {ex.Message}";
            datosParaElGrafico = new List<GraficoDto>();
        }
    }

    private async Task RenderizarGraficoAsync()
    {
        if (datosParaElGrafico == null || datosParaElGrafico.Count == 0)
        {
            await JS.InvokeVoidAsync("renderPresupuestoChart", "chartPresupuesto", new
            {
                labels = new string[0],
                presupuesto = new decimal[0],
                ejecucion = new decimal[0]
            });
            await JS.InvokeVoidAsync("renderPresupuestoPieChart", "chartPresupuestoPie", new
            {
                labels = new string[0],
                ejecucion = new decimal[0]
            });
            return;
        }
        var labels = datosParaElGrafico.Select(x => x.TipoGastoNombre ?? "").ToArray();
        var presupuesto = datosParaElGrafico.Select(x => (decimal)x.Presupuestado).ToArray();
        var ejecucion = datosParaElGrafico.Select(x => (decimal)x.Ejecutado).ToArray();
        await JS.InvokeVoidAsync("renderPresupuestoChart", "chartPresupuesto", new
        {
            labels,
            presupuesto,
            ejecucion
        });
        await JS.InvokeVoidAsync("renderPresupuestoPieChart", "chartPresupuestoPie", new
        {
            labels,
            ejecucion
        });
    }
}


