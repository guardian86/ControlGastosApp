@page "/graficos"
@inject HttpClient Http


<PageTitle>Gr치fico Comparativo de Presupuesto y Ejecuci칩n</PageTitle>

<Heading Size="HeadingSize.Is3">Gr치fico Comparativo de Presupuesto y Ejecuci칩n</Heading>

<Validations Validator="validator">
    <DateEdit @bind-Date="fechaInicio" Placeholder="Fecha Inicio" />
    <DateEdit @bind-Date="fechaFin" Placeholder="Fecha Fin" />
    <Button Color="Color.Primary" Clicked="BuscarGrafico">Buscar</Button>
</Validations>

<BarChart TItem="decimal" @ref="barChart" Options="chartOptions" Data="chartData" />

@code {
    DateTime fechaInicio = DateTime.Today.AddMonths(-1);
    DateTime fechaFin = DateTime.Today;
    List<GraficoDto> datos = new();
    BarChart<decimal>? barChart;
    BarChartOptions chartOptions = new() { Responsive = true };
    ChartData<decimal> chartData = new();
    Validations? validator;

    async Task BuscarGrafico()
    {
        if (validator is null || !await validator.ValidateAll()) return;
        var url = $"api/Graficos?fechaInicio={fechaInicio:yyyy-MM-dd}&fechaFin={fechaFin:yyyy-MM-dd}";
        datos = await Http.GetFromJsonAsync<List<GraficoDto>>(url) ?? new();
        chartData.Labels = datos.Select(x => (object?)x.TipoGastoNombre ?? string.Empty).ToList();
        chartData.Datasets.Clear();
        chartData.Datasets.Add(new BarChartDataset<decimal>
        {
            Label = "Presupuestado",
            Data = datos.Select(x => x.Presupuestado).ToList(),
            BackgroundColor = "#4e73df"
        });
        chartData.Datasets.Add(new BarChartDataset<decimal>
        {
            Label = "Ejecutado",
            Data = datos.Select(x => x.Ejecutado).ToList(),
            BackgroundColor = "#1cc88a"
        });
        if (barChart != null)
            await barChart.Update();
    }
}
